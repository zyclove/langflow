"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[7408],{6944:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/component-chat-io-9dc92d3f9e5da3722f2e4f4872e3ef59.png"},12018:(e,t,n)=>{n.r(t),n.d(t,{CH:()=>a,assets:()=>h,chCodeConfig:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>x});const s=JSON.parse('{"id":"Components/components-io","title":"Inputs and outputs","description":"Input and output components define where data enters and exits your flow.","source":"@site/docs/Components/components-io.md","sourceDirName":"Components","slug":"/components-io","permalink":"/components-io","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Inputs and outputs","slug":"/components-io"},"sidebar":"docs","previous":{"title":"Helpers","permalink":"/components-helpers"},"next":{"title":"Logic","permalink":"/components-logic"}}');var o=n(74848),r=n(28453),c=n(24754),i=n(17886);const d={title:"Inputs and outputs",slug:"/components-io"},l="Input and output components in Langflow",h={},a={annotations:c.hk,Code:c.Cy},p={staticMediaQuery:"not screen, (max-width: 768px)",lineNumbers:!0,showCopyButton:!0,themeName:"github-dark"},x=[{value:"Chat Input",id:"chat-input",level:2},{value:"Message method",id:"message-method",level:3},{value:"Text Input",id:"text-input",level:2},{value:"Chat Output",id:"chat-output",level:2},{value:"Text Output",id:"text-output",level:2},{value:"Chat components example flow",id:"chat-components-example-flow",level:2},{value:"Send chat messages with the API",id:"send-chat-messages-with-the-api",level:3},{value:"See also",id:"see-also",level:2}];function j(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=t;return a||g("CH",!1),a.Code||g("CH.Code",!0),s||g("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("style",{dangerouslySetInnerHTML:{__html:'[data-ch-theme="github-dark"] {  --ch-t-colorScheme: dark;--ch-t-foreground: #c9d1d9;--ch-t-background: #0d1117;--ch-t-lighter-inlineBackground: #0d1117e6;--ch-t-editor-background: #0d1117;--ch-t-editor-foreground: #c9d1d9;--ch-t-editor-lineHighlightBackground: #6e76811a;--ch-t-editor-rangeHighlightBackground: #ffffff0b;--ch-t-editor-infoForeground: #3794FF;--ch-t-editor-selectionBackground: #264F78;--ch-t-focusBorder: #1f6feb;--ch-t-tab-activeBackground: #0d1117;--ch-t-tab-activeForeground: #c9d1d9;--ch-t-tab-inactiveBackground: #010409;--ch-t-tab-inactiveForeground: #8b949e;--ch-t-tab-border: #30363d;--ch-t-tab-activeBorder: #0d1117;--ch-t-editorGroup-border: #30363d;--ch-t-editorGroupHeader-tabsBackground: #010409;--ch-t-editorLineNumber-foreground: #6e7681;--ch-t-input-background: #0d1117;--ch-t-input-foreground: #c9d1d9;--ch-t-input-border: #30363d;--ch-t-icon-foreground: #8b949e;--ch-t-sideBar-background: #010409;--ch-t-sideBar-foreground: #c9d1d9;--ch-t-sideBar-border: #30363d;--ch-t-list-activeSelectionBackground: #6e768166;--ch-t-list-activeSelectionForeground: #c9d1d9;--ch-t-list-hoverBackground: #6e76811a;--ch-t-list-hoverForeground: #c9d1d9; }'}}),"\n","\n",(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"input-and-output-components-in-langflow",children:"Input and output components in Langflow"})}),"\n",(0,o.jsx)(t.p,{children:"Input and output components define where data enters and exits your flow."}),"\n",(0,o.jsxs)(t.p,{children:["Both components accept user input and return a ",(0,o.jsx)(t.code,{children:"Message"})," object, but serve different purposes."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Text Input"})," component accepts a text string input and returns a ",(0,o.jsx)(t.code,{children:"Message"})," object containing only the input text. The output does not appear in the ",(0,o.jsx)(t.strong,{children:"Playground"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component accepts multiple input types including text, files, and metadata, and returns a ",(0,o.jsx)(t.code,{children:"Message"})," object containing the text along with sender information, session ID, and file attachments."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component provides an interactive chat interface in the ",(0,o.jsx)(t.strong,{children:"Playground"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"chat-input",children:"Chat Input"}),"\n",(0,o.jsxs)(t.p,{children:["This component collects user input as ",(0,o.jsx)(t.code,{children:"Text"})," strings from the chat and wraps it in a ",(0,o.jsx)(t.a,{href:"/concepts-objects#message-object",children:"Message"})," object that includes the input text, sender information, session ID, file attachments, and styling properties."]}),"\n",(0,o.jsx)(t.p,{children:"It can optionally store the message in a chat history."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Parameters"}),(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Inputs"})}),(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"input_value"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsx)(t.td,{children:"The Message to be passed as input."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"should_store_message"}),(0,o.jsx)(t.td,{children:"Store Messages"}),(0,o.jsx)(t.td,{children:"Store the message in the history."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"sender"}),(0,o.jsx)(t.td,{children:"Sender Type"}),(0,o.jsx)(t.td,{children:"The type of sender."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"sender_name"}),(0,o.jsx)(t.td,{children:"Sender Name"}),(0,o.jsx)(t.td,{children:"The name of the sender."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"session_id"}),(0,o.jsx)(t.td,{children:"Session ID"}),(0,o.jsx)(t.td,{children:"The unique identifier for the chat session. If empty, the current session ID parameter is used."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"files"}),(0,o.jsx)(t.td,{children:"Files"}),(0,o.jsx)(t.td,{children:"The files to be sent with the message."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"background_color"}),(0,o.jsx)(t.td,{children:"Background Color"}),(0,o.jsx)(t.td,{children:"The background color of the icon."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"chat_icon"}),(0,o.jsx)(t.td,{children:"Icon"}),(0,o.jsx)(t.td,{children:"The icon of the message."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"text_color"}),(0,o.jsx)(t.td,{children:"Text Color"}),(0,o.jsx)(t.td,{children:"The text color of the name."})]})]})]}),(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Outputs"})}),(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsx)(t.tbody,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"message"}),(0,o.jsx)(t.td,{children:"Message"}),(0,o.jsx)(t.td,{children:"The resulting chat message object with all specified properties."})]})})]})]}),"\n",(0,o.jsx)(t.h3,{id:"message-method",children:"Message method"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ChatInput"})," class provides an asynchronous method to create and store a ",(0,o.jsx)(t.code,{children:"Message"})," object based on the input parameters.\nThe ",(0,o.jsx)(t.code,{children:"Message"})," object is created in the ",(0,o.jsx)(t.code,{children:"message_response"})," method of the ChatInput class using the ",(0,o.jsx)(t.code,{children:"Message.create()"})," factory method."]}),"\n",(0,o.jsx)(a.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"message ",props:{style:{color:"#C9D1D9"}}},{content:"= await",props:{style:{color:"#FF7B72"}}},{content:" Message.create(",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    text",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".input_value,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    sender",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".sender,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    sender_name",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".sender_name,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    session_id",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".session_id,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    files",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".files,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    properties",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"{",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:'        "background_color"',props:{style:{color:"#A5D6FF"}}},{content:": background_color,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:'        "text_color"',props:{style:{color:"#A5D6FF"}}},{content:": text_color,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:'        "icon"',props:{style:{color:"#A5D6FF"}}},{content:": icon,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    },",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:")",props:{style:{color:"#C9D1D9"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,o.jsx)(t.h2,{id:"text-input",children:"Text Input"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Text Input"})," component accepts a text string input and returns a ",(0,o.jsx)(t.code,{children:"Message"})," object containing only the input text."]}),"\n",(0,o.jsxs)(t.p,{children:["The output does not appear in the ",(0,o.jsx)(t.strong,{children:"Playground"}),"."]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Parameters"}),(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Inputs"})}),(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsx)(t.tbody,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"input_value"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsx)(t.td,{children:"The text/content to be passed as output."})]})})]}),(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Outputs"})}),(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsx)(t.tbody,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"text"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsx)(t.td,{children:"The resulting text message."})]})})]})]}),"\n",(0,o.jsx)(t.h2,{id:"chat-output",children:"Chat Output"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Chat Output"})," component creates a ",(0,o.jsx)(t.a,{href:"/concepts-objects#message-object",children:"Message"})," object that includes the input text, sender information, session ID, and styling properties."]}),"\n",(0,o.jsx)(t.p,{children:"The component accepts the following input types."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/concepts-objects#data-object",children:"Data"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/concepts-objects#dataframe-object",children:"DataFrame"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/concepts-objects#message-object",children:"Message"})}),"\n"]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Parameters"}),(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Inputs"})}),(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"input_value"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsx)(t.td,{children:"The message to be passed as output."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"should_store_message"}),(0,o.jsx)(t.td,{children:"Store Messages"}),(0,o.jsx)(t.td,{children:"The flag to store the message in the history."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"sender"}),(0,o.jsx)(t.td,{children:"Sender Type"}),(0,o.jsx)(t.td,{children:"The type of sender."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"sender_name"}),(0,o.jsx)(t.td,{children:"Sender Name"}),(0,o.jsx)(t.td,{children:"The name of the sender."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"session_id"}),(0,o.jsx)(t.td,{children:"Session ID"}),(0,o.jsx)(t.td,{children:"The unique identifier for the chat session. If empty, the current session ID parameter is used."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"data_template"}),(0,o.jsx)(t.td,{children:"Data Template"}),(0,o.jsx)(t.td,{children:"The template to convert Data to Text. If the option is left empty, it is dynamically set to the Data's text key."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"background_color"}),(0,o.jsx)(t.td,{children:"Background Color"}),(0,o.jsx)(t.td,{children:"The background color of the icon."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"chat_icon"}),(0,o.jsx)(t.td,{children:"Icon"}),(0,o.jsx)(t.td,{children:"The icon of the message."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"text_color"}),(0,o.jsx)(t.td,{children:"Text Color"}),(0,o.jsx)(t.td,{children:"The text color of the name."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"clean_data"}),(0,o.jsx)(t.td,{children:"Basic Clean Data"}),(0,o.jsxs)(t.td,{children:["When enabled, ",(0,o.jsx)(t.code,{children:"DataFrame"})," inputs are cleaned when converted to text. Cleaning removes empty rows, empty lines in cells, and multiple newlines."]})]})]})]}),(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Outputs"})}),(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsx)(t.tbody,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"message"}),(0,o.jsx)(t.td,{children:"Message"}),(0,o.jsx)(t.td,{children:"The resulting chat message object with all specified properties."})]})})]})]}),"\n",(0,o.jsx)(t.h2,{id:"text-output",children:"Text Output"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Text Output"})," takes a single input of text and returns a ",(0,o.jsx)(t.a,{href:"/concepts-objects#message-object",children:"Message"})," object containing that text."]}),"\n",(0,o.jsxs)(t.p,{children:["The output does not appear in the ",(0,o.jsx)(t.strong,{children:"Playground"}),"."]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Parameters"}),(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Inputs"})}),(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsx)(t.tbody,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"input_value"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsx)(t.td,{children:"The text to be passed as output."})]})})]}),(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Outputs"})}),(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsx)(t.tbody,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"text"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsx)(t.td,{children:"The resulting text message."})]})})]})]}),"\n",(0,o.jsx)(t.h2,{id:"chat-components-example-flow",children:"Chat components example flow"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["To use the ",(0,o.jsx)(t.strong,{children:"Chat Input"})," and ",(0,o.jsx)(t.strong,{children:"Chat Output"})," components in a flow, connect them to components that accept or send the ",(0,o.jsx)(t.a,{href:"/concepts-objects#message-object",children:"Message"})," type."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["For this example, connect a ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component to an ",(0,o.jsx)(t.strong,{children:"OpenAI"})," model component's ",(0,o.jsx)(t.strong,{children:"Input"})," port, and then connect the ",(0,o.jsx)(t.strong,{children:"OpenAI"})," model component's ",(0,o.jsx)(t.strong,{children:"Message"})," port to the ",(0,o.jsx)(t.strong,{children:"Chat Output"})," component."]}),"\n",(0,o.jsxs)(t.ol,{start:"2",children:["\n",(0,o.jsxs)(t.li,{children:["In the ",(0,o.jsx)(t.strong,{children:"OpenAI"})," model component, in the ",(0,o.jsx)(t.strong,{children:"OpenAI API Key"})," field, add your ",(0,o.jsx)(t.strong,{children:"OpenAI API key"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"The flow looks like this:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Chat input and output components connected to an OpenAI model",src:n(6944).A+"",width:"4000",height:"2574"})}),"\n",(0,o.jsxs)(t.ol,{start:"3",children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["To send a message to your flow, open the ",(0,o.jsx)(t.strong,{children:"Playground"}),", and then enter a message.\nThe ",(0,o.jsx)(t.strong,{children:"OpenAI"})," model component responds.\nOptionally, in the ",(0,o.jsx)(t.strong,{children:"OpenAI"})," model component, enter a ",(0,o.jsx)(t.strong,{children:"System Message"})," to control the model's response."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["In the Langflow UI, click your flow name, and then click ",(0,o.jsx)(t.strong,{children:"Logs"}),".\nThe ",(0,o.jsx)(t.strong,{children:"Logs"})," pane opens.\nHere, you can inspect your component logs.\n",(0,o.jsx)(t.img,{alt:"Logs pane",src:n(77232).A+"",width:"3200",height:"1716"})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Your first message was sent by the ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component to the ",(0,o.jsx)(t.strong,{children:"OpenAI"})," model component.\nClick ",(0,o.jsx)(t.strong,{children:"Outputs"})," to view the sent message:"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:'  "messages": [',props:{}}]},{tokens:[{content:"    {",props:{}}]},{tokens:[{content:'      "message": "What\'s the recommended way to install Docker on Mac M1?",',props:{}}]},{tokens:[{content:'      "sender": "User",',props:{}}]},{tokens:[{content:'      "sender_name": "User",',props:{}}]},{tokens:[{content:'      "session_id": "Session Apr 21, 17:37:04",',props:{}}]},{tokens:[{content:'      "stream_url": null,',props:{}}]},{tokens:[{content:'      "component_id": "ChatInput-4WKag",',props:{}}]},{tokens:[{content:'      "files": [],',props:{}}]},{tokens:[{content:'      "type": "text"',props:{}}]},{tokens:[{content:"    }",props:{}}]},{tokens:[{content:"  ],",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(t.ol,{start:"6",children:["\n",(0,o.jsxs)(t.li,{children:["Your second message was sent by the ",(0,o.jsx)(t.strong,{children:"OpenAI"})," model component to the ",(0,o.jsx)(t.strong,{children:"Chat Output"})," component.\nThis is the raw text output of the model's response.\nThe ",(0,o.jsx)(t.strong,{children:"Chat Output"})," component accepts this text as input and presents it as a formatted message.\nClick ",(0,o.jsx)(t.strong,{children:"Outputs"})," to view the sent message:"]}),"\n"]}),"\n",(0,o.jsx)(a.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:'  "outputs":',props:{}}]},{tokens:[{content:'    "text_output":',props:{}}]},{tokens:[{content:'      "message": "To install Docker on a Mac with an M1 chip, you should use Docker Desktop for Mac, which is optimized for Apple Silicon. Here\'s a step-by-step guide to installing Docker on your M1 Mac:\\n\\n1.',props:{}}]},{tokens:[{content:"      ...",props:{}}]},{tokens:[{content:'      "type": "text"',props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["Optionally, to view the outputs of each component in the flow, click ",(0,o.jsx)(i.A,{name:"TextSearch","aria-label":"Inspect icon"}),"."]})}),"\n",(0,o.jsx)(t.h3,{id:"send-chat-messages-with-the-api",children:"Send chat messages with the API"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component is often the entry point for passing messages to the Langflow API.\nTo send the same example messages programmatically to your Langflow server, do the following:"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["To get your Langflow endpoint, click ",(0,o.jsx)(t.strong,{children:"Publish"}),", and then click ",(0,o.jsx)(t.strong,{children:"API access"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:["Copy the command from the ",(0,o.jsx)(t.strong,{children:"cURL"})," tab, and then paste it in your terminal.\nIt looks similar to this:"]}),"\n"]}),"\n",(0,o.jsx)(a.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"curl --request POST \\",props:{}}]},{tokens:[{content:"  --url 'http://localhost:7860/api/v1/run/51eed711-4530-4fdc-9bce-5db4351cc73a?stream=false' \\",props:{}}]},{tokens:[{content:"  --header 'Content-Type: application/json' \\",props:{}}]},{tokens:[{content:"  --data '{",props:{}}]},{tokens:[{content:'  "input_value": "What\'s the recommended way to install Docker on Mac M1?",',props:{}}]},{tokens:[{content:'  "output_type": "chat",',props:{}}]},{tokens:[{content:'  "input_type": "chat"',props:{}}]},{tokens:[{content:"}'",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(t.ol,{start:"3",children:["\n",(0,o.jsxs)(t.li,{children:["Modify ",(0,o.jsx)(t.code,{children:"input_value"})," so it contains the question, ",(0,o.jsx)(t.code,{children:"What's the recommended way to install Docker on Mac M1?"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Note the ",(0,o.jsx)(t.code,{children:"output_type"})," and ",(0,o.jsx)(t.code,{children:"input_type"})," parameters that are passed with the message. The ",(0,o.jsx)(t.code,{children:"chat"})," type provides additional configuration options, and the messages appear in the ",(0,o.jsx)(t.strong,{children:"Playground"}),". The ",(0,o.jsx)(t.code,{children:"text"})," type returns only text strings, and does not appear in the ",(0,o.jsx)(t.strong,{children:"Playground"}),"."]}),"\n",(0,o.jsxs)(t.ol,{start:"4",children:["\n",(0,o.jsxs)(t.li,{children:["Add a custom ",(0,o.jsx)(t.code,{children:"session_id"})," to the message's ",(0,o.jsx)(t.code,{children:"data"})," object."]}),"\n"]}),"\n",(0,o.jsx)(a.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"curl --request POST \\",props:{}}]},{tokens:[{content:"  --url 'http://localhost:7860/api/v1/run/51eed711-4530-4fdc-9bce-5db4351cc73a?stream=false' \\",props:{}}]},{tokens:[{content:"  --header 'Content-Type: application/json' \\",props:{}}]},{tokens:[{content:"  --data '{",props:{}}]},{tokens:[{content:'  "input_value": "Whats the recommended way to install Docker on Mac M1",',props:{}}]},{tokens:[{content:'  "session_id": "docker-question-on-m1",',props:{}}]},{tokens:[{content:'  "output_type": "chat",',props:{}}]},{tokens:[{content:'  "input_type": "chat"',props:{}}]},{tokens:[{content:"}'",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(t.p,{children:["The custom ",(0,o.jsx)(t.code,{children:"session_id"})," value starts a new chat session between your client and the Langflow server, and can be useful in keeping conversations and AI context separate."]}),"\n",(0,o.jsxs)(t.ol,{start:"5",children:["\n",(0,o.jsx)(t.li,{children:"Send the POST request.\nYour request is answered."}),"\n",(0,o.jsxs)(t.li,{children:["Navigate to the ",(0,o.jsx)(t.strong,{children:"Playground"}),".\nA new chat session called ",(0,o.jsx)(t.code,{children:"docker-question-on-m1"})," has appeared, using your unique ",(0,o.jsx)(t.code,{children:"session_id"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:["To modify additional parameters with ",(0,o.jsx)(t.strong,{children:"Tweaks"})," for your ",(0,o.jsx)(t.strong,{children:"Chat Input"})," and ",(0,o.jsx)(t.strong,{children:"Chat Output"})," components, click ",(0,o.jsx)(t.strong,{children:"Publish"}),", and then click ",(0,o.jsx)(t.strong,{children:"API access"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:["Click ",(0,o.jsx)(t.strong,{children:"Tweaks"})," to modify parameters in the component's ",(0,o.jsx)(t.code,{children:"data"})," object.\nFor example, disabling storing messages from the ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component adds a ",(0,o.jsx)(t.strong,{children:"Tweak"})," to your command:"]}),"\n"]}),"\n",(0,o.jsx)(a.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"curl --request POST \\",props:{}}]},{tokens:[{content:"  --url 'http://localhost:7860/api/v1/run/51eed711-4530-4fdc-9bce-5db4351cc73a?stream=false' \\",props:{}}]},{tokens:[{content:"  --header 'Content-Type: application/json' \\",props:{}}]},{tokens:[{content:"  --data '{",props:{}}]},{tokens:[{content:'  "input_value": "Text to input to the flow",',props:{}}]},{tokens:[{content:'  "output_type": "chat",',props:{}}]},{tokens:[{content:'  "input_type": "chat",',props:{}}]},{tokens:[{content:'  "tweaks": {',props:{}}]},{tokens:[{content:'    "ChatInput-4WKag": {',props:{}}]},{tokens:[{content:'      "should_store_message": false',props:{}}]},{tokens:[{content:"    }",props:{}}]},{tokens:[{content:"  }",props:{}}]},{tokens:[{content:"}'",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(t.p,{children:["To confirm your command is using the tweak, navigate to the ",(0,o.jsx)(t.strong,{children:"Logs"})," pane and view the request from the ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component.\nThe value for ",(0,o.jsx)(t.code,{children:"should_store_message"})," is ",(0,o.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"see-also",children:"See also"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/session-id",children:"Session ID"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(j,{...e})}):j(e)}function g(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},17886:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var s=n(64058),o=n(74848);function r({name:e,...t}){const n=s[e];return n?(0,o.jsx)(n,{...t}):null}},77232:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/logs-6ae22cc6a87b128cbc0c7f4559b47f10.png"}}]);