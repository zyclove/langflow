"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[417],{28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>d});var s=i(96540);const n={},r=s.createContext(n);function a(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},46105:(e,t,i)=>{i.r(t),i.d(t,{contentTitle:()=>d,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"type":"api","id":"build-vertex-stream","title":"Build Vertex Stream","description":"","slug":"/build-vertex-stream","frontMatter":{},"api":{"tags":["Chat"],"description":"Build a vertex instead of the entire graph.\\n\\nThis function is responsible for building a single vertex instead of the entire graph.\\nIt takes the `flow_id` and `vertex_id` as required parameters, and an optional `session_id`.\\nIt also depends on the `ChatService` and `SessionService` services.\\n\\nIf `session_id` is not provided, it retrieves the graph from the cache using the `chat_service`.\\nIf `session_id` is provided, it loads the session data using the `session_service`.\\n\\nOnce the graph is obtained, it retrieves the specified vertex using the `vertex_id`.\\nIf the vertex does not support streaming, an error is raised.\\nIf the vertex has a built result, it sends the result as a chunk.\\nIf the vertex is not frozen or not built, it streams the vertex data.\\nIf the vertex has a result, it sends the result as a chunk.\\nIf none of the above conditions are met, an error is raised.\\n\\nIf any exception occurs during the process, an error message is sent.\\nFinally, the stream is closed.\\n\\nReturns:\\n    A `StreamingResponse` object with the streamed vertex data in text/event-stream format.\\n\\nRaises:\\n    HTTPException: If an error occurs while building the vertex.","operationId":"build_vertex_stream_api_v1_build__flow_id___vertex_id__stream_get","deprecated":true,"parameters":[{"name":"flow_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Flow Id"}},{"name":"vertex_id","in":"path","required":true,"schema":{"type":"string","title":"Vertex Id"}}],"responses":{"200":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"properties":{"detail":{"items":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"}}}}},"method":"get","path":"/api/v1/build/{flow_id}/{vertex_id}/stream","securitySchemes":{"OAuth2PasswordBearer":{"type":"oauth2","flows":{"password":{"scopes":{},"tokenUrl":"api/v1/login"}}},"API key query":{"type":"apiKey","in":"query","name":"x-api-key"},"API key header":{"type":"apiKey","in":"header","name":"x-api-key"}},"info":{"title":"Langflow","version":"1.4.3"},"postman":{"name":"Build Vertex Stream","description":{"content":"Build a vertex instead of the entire graph.\\n\\nThis function is responsible for building a single vertex instead of the entire graph.\\nIt takes the `flow_id` and `vertex_id` as required parameters, and an optional `session_id`.\\nIt also depends on the `ChatService` and `SessionService` services.\\n\\nIf `session_id` is not provided, it retrieves the graph from the cache using the `chat_service`.\\nIf `session_id` is provided, it loads the session data using the `session_service`.\\n\\nOnce the graph is obtained, it retrieves the specified vertex using the `vertex_id`.\\nIf the vertex does not support streaming, an error is raised.\\nIf the vertex has a built result, it sends the result as a chunk.\\nIf the vertex is not frozen or not built, it streams the vertex data.\\nIf the vertex has a result, it sends the result as a chunk.\\nIf none of the above conditions are met, an error is raised.\\n\\nIf any exception occurs during the process, an error message is sent.\\nFinally, the stream is closed.\\n\\nReturns:\\n    A `StreamingResponse` object with the streamed vertex data in text/event-stream format.\\n\\nRaises:\\n    HTTPException: If an error occurs while building the vertex.","type":"text/plain"},"url":{"path":["api","v1","build",":flow_id",":vertex_id","stream"],"host":["{{baseUrl}}"],"query":[],"variable":[{"disabled":false,"description":{"content":"(Required) ","type":"text/plain"},"type":"any","value":"<uuid>","key":"flow_id"},{"disabled":false,"description":{"content":"(Required) ","type":"text/plain"},"type":"any","value":"<string>","key":"vertex_id"}]},"header":[{"key":"Accept","value":"application/json"}],"method":"GET"}},"source":"@site/openapi.json","sourceDirName":".","permalink":"/api/build-vertex-stream","previous":{"title":"Build Vertex","permalink":"/api/build-vertex"},"next":{"title":"Build Public Tmp","permalink":"/api/build-public-tmp"}}');var n=i(74848),r=i(28453);const a={},d="Build Vertex Stream",o=[];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"build-vertex-stream",children:"Build Vertex Stream"})}),"\n",(0,n.jsx)(t.admonition,{title:"deprecated",type:"caution",children:(0,n.jsx)(t.p,{children:"This endpoint has been deprecated and may be removed in future versions of the API."})}),"\n",(0,n.jsx)(t.p,{children:"Build a vertex instead of the entire graph."}),"\n",(0,n.jsxs)(t.p,{children:["This function is responsible for building a single vertex instead of the entire graph.\nIt takes the ",(0,n.jsx)(t.code,{children:"flow_id"})," and ",(0,n.jsx)(t.code,{children:"vertex_id"})," as required parameters, and an optional ",(0,n.jsx)(t.code,{children:"session_id"}),".\nIt also depends on the ",(0,n.jsx)(t.code,{children:"ChatService"})," and ",(0,n.jsx)(t.code,{children:"SessionService"})," services."]}),"\n",(0,n.jsxs)(t.p,{children:["If ",(0,n.jsx)(t.code,{children:"session_id"})," is not provided, it retrieves the graph from the cache using the ",(0,n.jsx)(t.code,{children:"chat_service"}),".\nIf ",(0,n.jsx)(t.code,{children:"session_id"})," is provided, it loads the session data using the ",(0,n.jsx)(t.code,{children:"session_service"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Once the graph is obtained, it retrieves the specified vertex using the ",(0,n.jsx)(t.code,{children:"vertex_id"}),".\nIf the vertex does not support streaming, an error is raised.\nIf the vertex has a built result, it sends the result as a chunk.\nIf the vertex is not frozen or not built, it streams the vertex data.\nIf the vertex has a result, it sends the result as a chunk.\nIf none of the above conditions are met, an error is raised."]}),"\n",(0,n.jsx)(t.p,{children:"If any exception occurs during the process, an error message is sent.\nFinally, the stream is closed."}),"\n",(0,n.jsxs)(t.p,{children:["Returns:\nA ",(0,n.jsx)(t.code,{children:"StreamingResponse"})," object with the streamed vertex data in text/event-stream format."]}),"\n",(0,n.jsx)(t.p,{children:"Raises:\nHTTPException: If an error occurs while building the vertex."}),"\n",(0,n.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,n.jsx)("thead",{children:(0,n.jsx)("tr",{children:(0,n.jsx)("th",{style:{textAlign:"left"},children:"Path Parameters"})})}),(0,n.jsxs)("tbody",{children:[(0,n.jsx)("tr",{children:(0,n.jsxs)("td",{children:[(0,n.jsx)("code",{children:"flow_id"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" uuid"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,n.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"})]})}),(0,n.jsx)("tr",{children:(0,n.jsxs)("td",{children:[(0,n.jsx)("code",{children:"vertex_id"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" Vertex Id"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,n.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"})]})})]})]}),"\n",(0,n.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,n.jsx)("thead",{children:(0,n.jsx)("tr",{children:(0,n.jsx)("th",{style:{textAlign:"left"},children:"Responses"})})}),(0,n.jsxs)("tbody",{children:[(0,n.jsx)("tr",{children:(0,n.jsxs)("td",{children:[(0,n.jsxs)("div",{style:{display:"flex"},children:[(0,n.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,n.jsx)("code",{children:"200"})}),(0,n.jsx)("div",{children:(0,n.jsx)(t.p,{children:"Successful Response"})})]}),(0,n.jsx)("div",{})]})}),(0,n.jsx)("tr",{children:(0,n.jsxs)("td",{children:[(0,n.jsxs)("div",{style:{display:"flex"},children:[(0,n.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,n.jsx)("code",{children:"422"})}),(0,n.jsx)("div",{children:(0,n.jsx)(t.p,{children:"Validation Error"})})]}),(0,n.jsx)("div",{children:(0,n.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,n.jsx)("thead",{children:(0,n.jsx)("tr",{children:(0,n.jsxs)("th",{style:{textAlign:"left"},children:[(0,n.jsx)("span",{children:"Schema "}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,n.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,n.jsx)("div",{})]})})}),(0,n.jsx)("tbody",{children:(0,n.jsx)("tr",{children:(0,n.jsxs)("td",{children:[(0,n.jsx)("code",{children:"detail"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" object[]"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,n.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,n.jsx)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:(0,n.jsxs)("tbody",{children:[(0,n.jsx)("tr",{children:(0,n.jsxs)("td",{children:[(0,n.jsx)("code",{children:"loc"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" undefined[]"})]})}),(0,n.jsx)("tr",{children:(0,n.jsxs)("td",{children:[(0,n.jsx)("code",{children:"msg"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" Message"})]})}),(0,n.jsx)("tr",{children:(0,n.jsxs)("td",{children:[(0,n.jsx)("code",{children:"type"}),(0,n.jsx)("span",{style:{opacity:"0.6"},children:" Error Type"})]})})]})})]})})})]})})]})})]})]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);